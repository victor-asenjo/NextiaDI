plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
}

//groupID https://docs.gradle.org/current/userguide/publishing_maven.html#sec:identity_values_in_the_generated_pom
// artifactID taken from project name in settings.gradle file
group 'edu.upc.essi.dtim'
//version '0.1.0'
version '0.1.0-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11


repositories {
    mavenCentral()
}

dependencies {

    // https://mvnrepository.com/artifact/org.apache.jena/apache-jena-libs
    implementation group: 'org.apache.jena', name: 'apache-jena-libs', version: '4.1.0', ext: 'pom'
    implementation group: 'org.apache.jena', name: 'jena-querybuilder', version: '4.1.0'

    implementation group: 'net.minidev', name: 'json-smart', version: '2.4.7'
    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
}

test {
    useJUnitPlatform()
}
//task customFatJar(type: Jar) {
//    manifest {
//        attributes 'Main-Class': 'edu.upc.essi.dtim.Nuupdi'
//    }
//    baseName = 'all-in-one-jar'
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}
task uberJar(type: Jar) {
    archiveClassifier = 'uber'

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

signing {
    required {
        // signing is required if this is a release version and the artifacts are to be published
        !version.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'NextiaDI'
                description = 'Agnostic and Incremental Data Integration that facilitates generating graph-based schema of heterogeneous data sources and integrating them.'
                url = 'https://www.essi.upc.edu/dtim/nextiadi/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jflores'
                        name = 'Javier Flores'
                        email = 'jflores@essi.upc.edu'
                        url = 'https://www.essi.upc.edu/dtim/people/jflores'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/dtim-upc/NextiaDI.git'
                    developerConnection = 'scm:git:ssh://github.com/dtim-upc/NextiaDI.git'
                    url = 'https://github.com/dtim-upc/NextiaDI'
                }
            }
        }
    }
    repositories {
        maven {
            /*
            credentials {
                // nexusUsername and nexusPassword are in gradle.properties file.
                username nexusUsername
                password nexusPassword
            }*/

            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}